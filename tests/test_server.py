# Copyright 2023 Canonical Ltd.
# See LICENSE file for licensing details.

import json
import textwrap
import time

import pytest

from cos_alerter.server import app


@pytest.fixture
def flask_client():
    return app.test_client()


@pytest.fixture
def fake_fs(fs):
    fs.create_file("/etc/cos-alerter.yaml")
    config_contents = textwrap.dedent(
        """
        watch:
          data_file: "/run/cos-alerter-data"
        """
    )
    with open("/etc/cos-alerter.yaml", "w") as f:
        f.write(config_contents)
    fs.create_file("/run/cos-alerter-data")

    # Use the actual monotonic time here so we can ensure the
    # time generated by the code is different.
    current_time = time.monotonic()
    with open("/run/cos-alerter-data", "w") as f:
        json.dump(
            {
                "start_date": 1680125340.127957,
                "start_time": current_time,
                "alert_time": current_time,
                "notify_time": None,
            },
            f,
        )

    return fs


def test_alive_succeeds(flask_client, fake_fs):
    assert flask_client.post("/alive").status_code == 200


def test_alive_other_methods_fail(flask_client, fake_fs):
    assert flask_client.get("/alive").status_code == 405
    assert flask_client.head("/alive").status_code == 405
    assert flask_client.put("/alive").status_code == 405
    assert flask_client.delete("/alive").status_code == 405
    assert flask_client.patch("/alive").status_code == 405


def test_alive_updates_time(flask_client, fake_fs):
    flask_client.post("/alive")
    with open("/run/cos-alerter-data") as f:
        data = json.load(f)
    assert data["alert_time"] > data["start_time"]
